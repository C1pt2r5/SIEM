input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/usr/share/logstash/config/certs/logstash/logstash.crt"
    ssl_key => "/usr/share/logstash/config/certs/logstash/logstash.key"
    ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca/ca.crt"]
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Add common fields
  mutate {
    add_field => { "[@metadata][pipeline]" => "siem" }
    add_field => { "siem.version" => "1.0" }
    add_field => { "siem.processed_at" => "%{@timestamp}" }
  }

  # Parse different log types
  if [fields][log_type] == "auth" {
    grok {
      match => { 
        "message" => [
          "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{WORD:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:auth_message}",
          "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:host} %{WORD:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:auth_message}"
        ]
      }
      tag_on_failure => ["_grokparsefailure_auth"]
    }
    
    # Parse SSH authentication attempts
    if [program] == "sshd" {
      grok {
        match => { 
          "auth_message" => [
            "Failed password for (?:invalid user )?%{USERNAME:user.name} from %{IP:source.ip} port %{INT:source.port}",
            "Accepted password for %{USERNAME:user.name} from %{IP:source.ip} port %{INT:source.port}",
            "Invalid user %{USERNAME:user.name} from %{IP:source.ip} port %{INT:source.port}",
            "Connection closed by %{IP:source.ip} port %{INT:source.port}",
            "Disconnected from %{IP:source.ip} port %{INT:source.port}"
          ]
        }
        tag_on_failure => ["_grokparsefailure_ssh"]
      }
      
      if "Failed password" in [auth_message] {
        mutate {
          add_field => { "event.action" => "authentication_failure" }
          add_field => { "event.outcome" => "failure" }
          add_field => { "event.category" => "authentication" }
        }
      } else if "Accepted password" in [auth_message] {
        mutate {
          add_field => { "event.action" => "authentication_success" }
          add_field => { "event.outcome" => "success" }
          add_field => { "event.category" => "authentication" }
        }
      }
    }
    
    # Parse sudo commands
    if [program] == "sudo" {
      grok {
        match => { 
          "auth_message" => "%{USERNAME:user.name} : TTY=%{NOTSPACE:tty} ; PWD=%{PATH:working_directory} ; USER=%{USERNAME:target_user} ; COMMAND=%{GREEDYDATA:process.command_line}"
        }
        tag_on_failure => ["_grokparsefailure_sudo"]
      }
      
      mutate {
        add_field => { "event.action" => "privilege_escalation" }
        add_field => { "event.category" => "process" }
      }
    }
  }
  
  # Parse Windows Event Logs
  if [fields][log_type] == "wineventlog" {
    if [winlog][event_id] == 4624 {
      mutate {
        add_field => { "event.action" => "logon_success" }
        add_field => { "event.outcome" => "success" }
        add_field => { "event.category" => "authentication" }
        add_field => { "user.name" => "%{[winlog][event_data][TargetUserName]}" }
        add_field => { "source.ip" => "%{[winlog][event_data][IpAddress]}" }
      }
    } else if [winlog][event_id] == 4625 {
      mutate {
        add_field => { "event.action" => "logon_failure" }
        add_field => { "event.outcome" => "failure" }
        add_field => { "event.category" => "authentication" }
        add_field => { "user.name" => "%{[winlog][event_data][TargetUserName]}" }
        add_field => { "source.ip" => "%{[winlog][event_data][IpAddress]}" }
      }
    } else if [winlog][event_id] == 4648 {
      mutate {
        add_field => { "event.action" => "explicit_logon" }
        add_field => { "event.category" => "authentication" }
        add_field => { "user.name" => "%{[winlog][event_data][SubjectUserName]}" }
        add_field => { "target_user.name" => "%{[winlog][event_data][TargetUserName]}" }
      }
    }
  }
  
  # Parse web server logs
  if [fields][log_type] == "apache" or [fields][log_type] == "nginx" {
    grok {
      match => { 
        "message" => "%{COMBINEDAPACHELOG}"
      }
      tag_on_failure => ["_grokparsefailure_web"]
    }
    
    mutate {
      add_field => { "event.category" => "web" }
      add_field => { "http.request.method" => "%{verb}" }
      add_field => { "http.response.status_code" => "%{response}" }
      add_field => { "source.ip" => "%{clientip}" }
      add_field => { "url.original" => "%{request}" }
    }
    
    if [response] >= 400 {
      mutate {
        add_field => { "event.outcome" => "failure" }
      }
    } else {
      mutate {
        add_field => { "event.outcome" => "success" }
      }
    }
  }
  
  # GeoIP enrichment
  if [source.ip] and [source.ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.|127\.)/ {
    geoip {
      source => "source.ip"
      target => "source.geo"
      database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
    }
  }
  
  # Threat intelligence enrichment
  if [source.ip] {
    # Add threat intel lookup (placeholder for external API calls)
    mutate {
      add_field => { "threat.indicator.ip" => "%{source.ip}" }
    }
  }
  
  # Normalize timestamp
  date {
    match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601" ]
    target => "@timestamp"
  }
  
  # Clean up fields
  mutate {
    remove_field => [ "timestamp", "auth_message", "verb", "request", "response", "clientip" ]
  }
}

output {
  elasticsearch {
    hosts => ["https://elasticsearch:9200"]
    user => "elastic"
    password => "changeme"
    ssl => true
    ssl_certificate_verification => true
    cacert => "/usr/share/logstash/config/certs/ca/ca.crt"
    
    # Dynamic index naming based on log type and date
    index => "siem-%{[fields][log_type]:unknown}-%{+YYYY.MM.dd}"
    
    # Index template
    template_name => "siem"
    template_pattern => "siem-*"
    template => "/usr/share/logstash/templates/siem-template.json"
    template_overwrite => true
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug {
      metadata => false
    }
  }
}
